// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using airly_data_fetch;

#nullable disable

namespace airly_data_fetch.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("airly")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("airly_data_fetch.AveragedValueEntity", b =>
                {
                    b.Property<int>("AveragedValuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AveragedValuesId"));

                    b.Property<int>("AveragedValueTimeType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("FromDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MeasurementEntityFk")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("TillDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AveragedValuesId");

                    b.HasIndex("MeasurementEntityFk");

                    b.ToTable("AveragedValues", "airly");
                });

            modelBuilder.Entity("airly_data_fetch.MeasurementEntity", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MeasurementId"));

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("RequestTime")
                        .HasColumnType("interval");

                    b.Property<int>("StationId")
                        .HasColumnType("integer");

                    b.Property<string>("StationName")
                        .HasColumnType("text");

                    b.HasKey("MeasurementId");

                    b.ToTable("Measurements", "airly");
                });

            modelBuilder.Entity("airly_data_fetch.StandardEntity", b =>
                {
                    b.Property<int>("StandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StandardId"));

                    b.Property<int>("AveragedValueEntityFk")
                        .HasColumnType("integer");

                    b.Property<string>("Averaging")
                        .HasColumnType("text");

                    b.Property<double?>("Limit")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double?>("Percent")
                        .HasColumnType("double precision");

                    b.Property<string>("Pollutant")
                        .HasColumnType("text");

                    b.HasKey("StandardId");

                    b.HasIndex("AveragedValueEntityFk");

                    b.ToTable("Standards", "airly");
                });

            modelBuilder.Entity("airly_data_fetch.ValuePairEntity", b =>
                {
                    b.Property<int>("ValuePairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ValuePairId"));

                    b.Property<int>("AveragedValueEntityFk")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("ValuePairId");

                    b.HasIndex("AveragedValueEntityFk");

                    b.ToTable("ValuePairs", "airly");
                });

            modelBuilder.Entity("airly_data_fetch.AveragedValueEntity", b =>
                {
                    b.HasOne("airly_data_fetch.MeasurementEntity", "MeasurementEntity")
                        .WithMany("AveragedValues")
                        .HasForeignKey("MeasurementEntityFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementEntity");
                });

            modelBuilder.Entity("airly_data_fetch.StandardEntity", b =>
                {
                    b.HasOne("airly_data_fetch.AveragedValueEntity", "AveragedValue")
                        .WithMany("Standards")
                        .HasForeignKey("AveragedValueEntityFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AveragedValue");
                });

            modelBuilder.Entity("airly_data_fetch.ValuePairEntity", b =>
                {
                    b.HasOne("airly_data_fetch.AveragedValueEntity", "AveragedValue")
                        .WithMany("Values")
                        .HasForeignKey("AveragedValueEntityFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AveragedValue");
                });

            modelBuilder.Entity("airly_data_fetch.AveragedValueEntity", b =>
                {
                    b.Navigation("Standards");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("airly_data_fetch.MeasurementEntity", b =>
                {
                    b.Navigation("AveragedValues");
                });
#pragma warning restore 612, 618
        }
    }
}
