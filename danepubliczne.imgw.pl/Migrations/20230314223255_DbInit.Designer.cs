// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using danepubliczne.imgw.pl.Persistence;

#nullable disable

namespace danepubliczne.imgw.pl.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230314223255_DbInit")]
    partial class DbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("danepubliczne.imgw.pl.Entities.WatherDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CloudCover")
                        .HasColumnType("integer");

                    b.Property<string>("CloudCoverMeasurementStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IceIndicator")
                        .HasColumnType("text");

                    b.Property<int?>("RelativeHumidity")
                        .HasColumnType("integer");

                    b.Property<string>("RelativeHumidityMeasurementStatus")
                        .HasColumnType("text");

                    b.Property<int>("StationCode")
                        .HasColumnType("integer");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("TemperatureMeasurementStatus")
                        .HasColumnType("text");

                    b.Property<string>("VentilationIndicator")
                        .HasColumnType("text");

                    b.Property<string>("VisibilityCode")
                        .HasColumnType("text");

                    b.Property<string>("VisibilityMeasurementStatus")
                        .HasColumnType("text");

                    b.Property<double?>("WetBulbTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("WetBulbTemperatureMeasurementStatus")
                        .HasColumnType("text");

                    b.Property<string>("WindDirectionCode")
                        .HasColumnType("text");

                    b.Property<string>("WindDirectionMeasurementStatus")
                        .HasColumnType("text");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("double precision");

                    b.Property<string>("WindSpeedMeasurementStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WatherData");
                });
#pragma warning restore 612, 618
        }
    }
}
